"""Rebanadas ‚Äì √≠ndices negativos
Observa el fragmento de c√≥digo a continuaci√≥n:

my_list[start:end]
 
Para confirmar:

start es el √≠ndice del primer elemento incluido en la rebanada.
end es el √≠ndice del primer elemento no incluido en la rebanada.
As√≠ es como los √≠ndices negativos funcionan en las rebanadas:


my_list = [10, 8, 6, 4, 2]
new_list = my_list[1:-1]
print(new_list)
 
El resultado del fragmento es:

[8, 6, 4]


Si start especifica un elemento que se encuentra m√°s all√° del descrito por end (desde el punto de vista inicial de la lista), la rebanada estar√° vac√≠a:


my_list = [10, 8, 6, 4, 2]
new_list = my_list[-1:1]
print(new_list)
 
La output del fragmento es:

[]
Output
Si omites el start en tu rebanada, se supone que deseas obtener un segmento que comienza en el elemento con √≠ndice 0.

En otras palabras, la rebanada ser√≠a de esta forma:

my_list[:end]
 
es un equivalente m√°s compacto de:

my_list[0:end]

Observa el fragmento de c√≥digo a continuaci√≥n:


my_list = [10, 8, 6, 4, 2]
new_list = my_list[:3]
print(new_list)
 
Es por esto que su output es: [10, 8, 6].

Del mismo modo, si omites el end en tu rebanada, se supone que deseas que el segmento termine en el elemento con el √≠ndice len(my_list).

En otras palabras, la rebanada ser√≠a de esta forma:

my_list[start:]
 
es un equivalente m√°s compacto de:

my_list[start:len(my_list)]
 
Observa el siguiente fragmento de c√≥digo:


my_list = [10, 8, 6, 4, 2]
new_list = my_list[3:]
print(new_list)
 
Por lo tanto, la output es: [4, 2].

Como hemos dicho anteriormente, el omitir el INICIO y FIN [INICIO:FIN] crea una copia de toda la lista:


my_list = [10, 8, 6, 4, 2]
new_list = my_list[:]
print(new_list)
 
El resultado del fragmento es: [10, 8, 6, 4, 2].

"""


"""M√°s sobre la instrucci√≥n del
La instrucci√≥n del descrita anteriormente puede eliminar m√°s de un elemento de la lista a la vez - tambi√©n puede eliminar rebanadas:


my_list = [10, 8, 6, 4, 2]
del my_list[1:3]
print(my_list)
 
Nota: En este caso, la rebanada ¬°no produce ninguna lista nueva!

La output del fragmento es: [10, 4, 2].

Tambi√©n es posible eliminar todos los elementos a la vez:


my_list = [10, 8, 6, 4, 2]
del my_list[:]
print(my_list)
 
La lista se queda vac√≠a y la output es: [].

Al eliminar la rebanada del c√≥digo, su significado cambia dram√°ticamente.

Echa un vistazo:


my_list = [10, 8, 6, 4, 2]
del my_list
print(my_list)
 
La instrucci√≥n del eliminar√° la lista, no su contenido.

La funci√≥n print() de la √∫ltima l√≠nea del c√≥digo provocar√° un error de ejecuci√≥n."""

"""3.6.4 Los operadores in y not in
Python ofrece dos operadores muy poderosos, capaces de revisar la lista para verificar si un valor espec√≠fico est√° almacenado dentro de la lista o no.

Estos operadores son:


elem in my_list
elem not in my_list
 
El primero de ellos (in) verifica si un elemento dado (el argumento izquierdo) est√° actualmente almacenado en alg√∫n lugar dentro de la lista (el argumento derecho) - el operador devuelve True en este caso.

El segundo (not in) comprueba si un elemento dado (el argumento izquierdo) est√° ausente en una lista - el operador devuelve True en este caso.

Observa el c√≥digo en el editor. El fragmento muestra ambos operadores en acci√≥n. ¬øPuedes adivinar su output? Ejecuta el programa para comprobar si ten√≠as raz√≥n.

my_list = [0, 3, 12, 8, 2]

print(5 in my_list)
print(5 not in my_list)
print(12 in my_list)

Listas - algunos programas simples
Ahora queremos mostrarte algunos programas simples que utilizan listas.

El primero de ellos intenta encontrar el valor mayor en la lista. Mira el c√≥digo en el editor.

my_list = [17, 3, 11, 5, 1, 9, 7, 15, 13]
largest = my_list[2]

for i in range(1, len(my_list)):
    if my_list[i] > largest:
        largest = my_list[i]

print(largest)


El concepto es bastante simple - asumimos temporalmente que el primer elemento es el m√°s grande y comparamos la hip√≥tesis con todos los elementos restantes de la lista.

El c√≥digo da como resultado el 17 (como se espera).

El c√≥digo puede ser reescrito para hacer uso de la forma reci√©n introducida del bucle for:


my_list = [17, 3, 11, 5, 1, 9, 7, 15, 13]
largest = my_list[0]
 
for i in my_list:
    if i > largest:
        largest = i
 
print(largest)
 
El programa anterior realiza una comparaci√≥n innecesaria, cuando el primer elemento se compara consigo mismo, pero esto no es un problema en absoluto.

El c√≥digo da como resultado el 17 tambi√©n (nada inusual).

Si necesitas ahorrar energ√≠a de la computadora, puedes usar una rebanada:


my_list = [17, 3, 11, 5, 1, 9, 7, 15, 13]
largest = my_list[0]
 
for i in my_list[1:]:
    if i > largest:
        largest = i
 
print(largest)
 
La pregunta es: ¬øCu√°l de estas dos acciones consume m√°s recursos inform√°ticos - solo una comparaci√≥n o rebanar casi todos los elementos de una lista?

Ahora encontremos la ubicaci√≥n de un elemento dado dentro de una lista:


my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
to_find = 5
found = False
 
for i in range(len(my_list)):
    found = my_list[i] == to_find
    if found:
        break
 
if found:
    print("Elemento encontrado en el √≠ndice", i)
else:
    print("ausente")
    
    
    my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # Es una lista de n√∫meros enteros # del 1 al 10.
to_find = 5 # El n√∫mero que queremos encontrar en la lista (en este caso, 5).
found = False # Variable booleana que se usa como bandera para indicar si el #  # elemento ha sido encontrado (inicia en False).

for i in range(len(my_list)): # Recorre todos los √≠ndices de la lista (de 0 a 9 en este caso, porque hay 10 elementos).
    found = my_list[i] == to_find # Compara el elemento en el √≠ndice i con el n√∫mero que queremos encontrar (5). Si encuentra el n√∫mero, found se vuelve True.
    if found: # verifica si la bandera cambi√≥ a True. Si es as√≠, ejecuta break para salir inmediatamente del bucle y evitar seguir buscando.
        break


Ejemplo de iteraciones:

Iteraci√≥n √çndice (i) Valor (my_list[i])	Comparaci√≥n (my_list[i] == 5) found
    1	        0	        1	                False	                False
    2	        1	        2	                False	                False
    3	        2	        3	                False	                False   
    4	        3	        4	                False	                False
    5	        4	        5	                True	                True (se detiene aqu√≠

if found:
    print("Elemento encontrado en el √≠ndice", i)
else:
    print("ausente") # Si el n√∫mero no est√° en la lista, imprime
 
üîó Flujo de ejecuci√≥n completo (si el n√∫mero est√° presente)
Comienza con found = False.
Recorre la lista elemento por elemento.
Al encontrar el n√∫mero (5), cambia found a True y sale del bucle con break.
Imprime el √≠ndice donde se encontr√≥ el elemento.


drawn = [5, 11, 9, 42, 3, 49]
bets = [3, 7, 11, 42, 34, 49]
hits = 0

for number in bets:
    if number in drawn:
        hits += 1

print(hits) 

Nota:

la lista drawn almacena todos los n√∫meros sorteados;
La lista bets almacena los n√∫meros con que se juega;
la variable hits cuenta tus aciertos.
la output del programa es: 4.



Iteraci√≥n	N√∫mero (number)	Est√° en drawn?    Acci√≥n	hits
1	        3	            ‚úÖ S√≠	        hits += 1	1
2	        7	            ‚ùå No	        Sin cambios	1
3	        11	            ‚úÖ S√≠	        hits += 1	2
4	        42	            ‚úÖ S√≠	        hits += 1	3
5	        34	            ‚ùå No	        Sin cambios	3
6	        49	            ‚úÖ S√≠	        hits += 1	4




elem in my_list
elem not in my_list"""

my_list = [1, 2, 4, 4, 1, 4, 2, 6, 2, 9]
#
unique_list = []# Escribe tu c√≥digo aqu√≠.

for number in my_list:
    if number not in unique_list:
        unique_list.append(number)

print("La lista con elementos √∫nicos:")
print(unique_list)


"""
3.6.7 RESUMEN DE SECCI√ìN
1. Si tienes una lista list_1, y la siguiente asignaci√≥n: list_2 = list_1 esto no hace una copia de la lista list_1, pero hace que las variables list_1 y list_2 apunten a la misma lista en la memoria. Por ejemplo:


vehicles_one = ['coche', 'bicicleta', 'motor']
print(vehicles_one) # output: ['coche', 'bicicleta', 'motor']
 
vehicles_two = vehicles_one
del vehicles_one[0] # elimina 'coche'
print(vehicles_two) # output: ['bicicleta', 'motor']
 
2. Si deseas copiar una lista o parte de la lista, puedes hacerlo haciendo uso de rebanadas:


colors = ['rojo', 'verde', 'naranja']
 
copy_whole_colors = colors[:]  # copia la lista entera
copy_part_colors = colors[0:2]  # copia parte de la lista
 
3. Tambi√©n puede utilizar √≠ndices negativos para hacer uso de rebanadas. Por ejemplo:


sample_list = ["A", "B", "C", "D", "E"]
new_list = sample_list[2:-1]
print(new_list)  # output: ['C', 'D']
 
4. Los par√°metros start y end son opcionales al partir en rebanadas una lista: list[start:end], por ejemplo:


my_list = [1, 2, 3, 4, 5]
slice_one = my_list[2: ]
slice_two = my_list[ :2]
slice_three = my_list[-2: ]
 
print(slice_one)  # output: [3, 4, 5]
print(slice_two)  # output: [1, 2]
print(slice_three)  # output: [4, 5]
 
5. Puedes eliminar rebanadas utilizando la instrucci√≥n del:


my_list = [1, 2, 3, 4, 5]
del my_list[0:2]
print(my_list)  # output: [3, 4, 5]
 
del my_list[:]
print(my_list)  # elimina el contenido de la lista, genera: []
 
6. Puedes probar si algunos elementos existen en una lista o no utilizando las palabras clave in y not in, por ejemplo:


my_list = ["A", "B", 1, 2]
 
print("A" in my_list)  # output: True
print("C" not in my_list)  # output: True
print(2 not in my_list)  # output: False
 """
 
 
"""
3.6.8 QUIZ DE SECCI√ìN
Pregunta 1: ¬øCu√°l es el resultado del siguiente fragmento de c√≥digo?


list_1 = ["A", "B", "C"]
list_2 = list_1
list_3 = list_2
 
del list_1[0]
del list_2[0]
 
print(list_3)
 
Ocultar
['C']
Pregunta 2: ¬øCu√°l es el resultado del siguiente fragmento de c√≥digo?


list_1 = ["A", "B", "C"]
list_2 = list_1
list_3 = list_2
 
del list_1[0]
del list_2
 
print(list_3)
 
Ocultar
['B', 'C']
Pregunta 3: ¬øCu√°l es el resultado del siguiente fragmento de c√≥digo?


list_1 = ["A", "B", "C"]
list_2 = list_1
list_3 = list_2
 
del list_1[0]
del list_2[:]
 
print(list_3)
 
Ocultar
[]
Pregunta 4: ¬øCu√°l es el resultado del siguiente fragmento de c√≥digo?


list_1 = ["A", "B", "C"]
list_2 = list_1[:]
list_3 = list_2[:]
 
del list_1[0]
del list_2[0]
 
print(list_3)
 
Ocultar
['A', 'B', 'C']
Pregunta 5: Inserta in o not in en lugar de ??? para que el c√≥digo genere el resultado esperado.


my_list = [1, 2, "in", True, "ABC"]
 
print(1 ??? my_list)  # output True
print("A" ??? my_list)  # output True
print(3 ??? my_list)  # output True
print(False ??? my_list)  # output False
 
Ocultar
my_list = [1, 2, "in", True, "ABC"]

print(1 in my_list)  # output True
print("A" not in my_list)  # output True
print(3 not in my_list)  # output True
print(False in my_list)  # output False"""